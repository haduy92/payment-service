// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Payment Service"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pay": {
            "post": {
                "description": "Processes a payment request with idempotency support. Retrying the same transaction_id will not charge twice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Process Payment",
                "parameters": [
                    {
                        "description": "Payment request",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecase.PaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment processed successfully",
                        "schema": {
                            "$ref": "#/definitions/usecase.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error",
                        "schema": {
                            "$ref": "#/definitions/usecase.PaymentResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/usecase.PaymentResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "usecase.PaymentRequest": {
            "type": "object",
            "required": [
                "amount",
                "transaction_id",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "description": "Payment amount (must be greater than 0)",
                    "type": "number",
                    "example": 99.99
                },
                "transaction_id": {
                    "description": "Unique transaction ID for idempotency",
                    "type": "string",
                    "example": "txn-456"
                },
                "user_id": {
                    "description": "User ID for the payment",
                    "type": "string",
                    "example": "user123"
                }
            }
        },
        "usecase.PaymentResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Payment amount",
                    "type": "number",
                    "example": 99.99
                },
                "message": {
                    "description": "Status message",
                    "type": "string",
                    "example": "Payment processed successfully"
                },
                "status": {
                    "description": "Payment status (success, failed)",
                    "type": "string",
                    "example": "success"
                },
                "transaction_id": {
                    "description": "Transaction ID",
                    "type": "string",
                    "example": "txn-456"
                },
                "user_id": {
                    "description": "User ID",
                    "type": "string",
                    "example": "user123"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Payment Service API",
	Description:      "A Go-based payment service implementing clean architecture with idempotent payment processing",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
